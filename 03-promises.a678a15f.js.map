{"mappings":"iiBAkEA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,UA0B/B,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAjCPT,EAAKM,KAAKW,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBAIJ,IAHA,IAAMC,EAASC,OAAOrB,EAAKK,YAAYiB,OACnCC,EAAQF,OAAOrB,EAAKC,WAAWqB,OAE1BE,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAChCjB,EAAciB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGjDsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGjDc,GAASF,OAAOrB,EAAKI,UAAUkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// const refs = {\n//   delayValue: document.querySelector('.delay input'),\n//   stepValue: document.querySelector('.step input'),\n//   amountValue: document.querySelector('.amount input'),\n//   submitButton: document.querySelector('button'),\n// };\n\n// refs.submitButton.addEventListener('submit', createPromise);\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   position = 0;\n//   delay = Number(refs.delayValue.value);\n\n//   // while (position <= Number(refs.amountValue.value)) {}\n\n//   return new Promise((resolve, reject) => {\n//     position += 1;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         // Fulfill\n//         resolve({ position, delay });\n//       } else {\n//         // Reject\n//         reject({ position, delay });\n//       }\n//     }, 2000);\n//     // console.dir(promise);\n//   });\n// }\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// createPromise()\n//   .then(x => console.log(x))\n//   .catch(y => console.log(y));\n\n// function onsubmit() {\n//   for (let i = 0; i < Number(refs.amountValue.value); i += 1) {}\n// }\n\n// const promiseObj = {\n//   position: 0,\n//   delay: Number(refs.delayInput.value),\n// };\n\n// createPromise({ position, delay })\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// console.log(Number(refs.delayValue.value));\n// ___________________________________\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  delayValue: document.querySelector('input[name=\"delay\"]'),\n  stepValue: document.querySelector('input[name=\"step\"]'),\n  amountValue: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(evt) {\n  evt.preventDefault();\n  const amount = Number(refs.amountValue.value);\n  let delay = Number(refs.delayValue.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += Number(refs.stepValue.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","delayValue","document","querySelector","stepValue","amountValue","form","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","amount","Number","value","delay1","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.a678a15f.js.map"}